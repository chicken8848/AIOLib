$date
	Thu Feb 15 17:49:58 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module zvn_unit_tb $end
$var wire 1 ! z $end
$var wire 3 " w_result [2:0] $end
$var wire 1 # w_cout $end
$var wire 1 $ v $end
$var wire 1 % n $end
$var wire 1 & b_out $end
$var reg 3 ' alu_fn [2:0] $end
$var reg 3 ( reg1 [2:0] $end
$var reg 3 ) reg2 [2:0] $end
$scope module c_unit $end
$var wire 2 * alu_fn [1:0] $end
$var wire 1 & b_o $end
$var wire 1 ! z $end
$var wire 1 $ v $end
$var wire 1 % n $end
$var reg 1 + result $end
$upscope $end
$scope module cla $end
$var wire 1 , cin $end
$var wire 3 - i_add1 [2:0] $end
$var wire 3 . i_add2 [2:0] $end
$var wire 3 / o_result [2:0] $end
$var wire 3 0 w_SUM [2:0] $end
$var wire 3 1 w_P [2:0] $end
$var wire 3 2 w_G [2:0] $end
$var wire 4 3 w_C [3:0] $end
$var wire 1 # cout $end
$scope begin genblk1[0] $end
$scope module full_adder_inst $end
$var wire 1 4 aftand1 $end
$var wire 1 5 aftand2 $end
$var wire 1 6 bit1 $end
$var wire 1 7 bit1_xor_bit2 $end
$var wire 1 8 bit2 $end
$var wire 1 9 cin $end
$var wire 1 : cout $end
$var wire 1 ; sum $end
$upscope $end
$upscope $end
$scope begin genblk1[1] $end
$scope module full_adder_inst $end
$var wire 1 < aftand1 $end
$var wire 1 = aftand2 $end
$var wire 1 > bit1 $end
$var wire 1 ? bit1_xor_bit2 $end
$var wire 1 @ bit2 $end
$var wire 1 A cin $end
$var wire 1 B cout $end
$var wire 1 C sum $end
$upscope $end
$upscope $end
$scope begin genblk1[2] $end
$scope module full_adder_inst $end
$var wire 1 D aftand1 $end
$var wire 1 E aftand2 $end
$var wire 1 F bit1 $end
$var wire 1 G bit1_xor_bit2 $end
$var wire 1 H bit2 $end
$var wire 1 I cin $end
$var wire 1 J cout $end
$var wire 1 K sum $end
$upscope $end
$upscope $end
$scope begin genblk2[0] $end
$upscope $end
$scope begin genblk2[1] $end
$upscope $end
$scope begin genblk2[2] $end
$upscope $end
$upscope $end
$scope module zvn_inst $end
$var wire 3 L a [2:0] $end
$var wire 1 M alufn_sig $end
$var wire 3 N b [2:0] $end
$var wire 3 O s [2:0] $end
$var wire 1 $ v $end
$var wire 1 P xb $end
$var wire 1 ! z $end
$var wire 1 % n $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
1P
b111 O
b10 N
1M
b1 L
1K
0J
0I
1H
1G
0F
0E
0D
1C
0B
1A
0@
0?
0>
0=
0<
1;
1:
19
18
07
16
15
04
b11 3
b1 2
b101 1
b111 0
b111 /
b101 .
b1 -
1,
0+
b1 *
b10 )
b1 (
b11 '
0&
1%
0$
0#
b111 "
0!
$end
#10
1#
0%
1J
0K
1D
1I
b1111 3
1B
b1 "
b1 /
b1 O
b1 0
0C
1<
1?
b111 1
1>
b11 (
b11 -
b11 L
#20
b11 *
b111 '
#30
0#
1&
1+
1%
0J
1K
0D
0I
0B
1C
0<
0A
b1 3
b110 1
0!
b111 "
b111 /
b111 O
b111 0
1;
04
0:
08
07
05
b0 2
b10 *
b100 .
06
b101 '
b11 )
b11 N
b10 (
b10 -
b10 L
#40
0$
1I
1A
1&
1+
1#
0!
1C
1B
1:
1%
b1111 3
0?
1=
0;
14
b110 "
b110 /
b110 O
b110 0
1K
1J
1@
17
0G
1E
b111 1
b110 2
b110 .
16
1F
b1 )
b1 N
b111 (
b111 -
b111 L
#50
1$
1&
1+
0%
0K
0I
0A
b1001 3
0:
1;
04
b11 "
b11 /
b11 O
b11 0
1C
0<
0B
07
1?
0=
b110 1
b100 2
06
0>
b100 (
b100 -
b100 L
#100000
