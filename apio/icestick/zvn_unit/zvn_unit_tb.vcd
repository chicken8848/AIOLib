$date
	Fri Feb 16 23:06:40 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module zvn_unit_tb $end
$var wire 1 ! z $end
$var wire 16 " w_result [15:0] $end
$var wire 1 # w_cout $end
$var wire 1 $ v $end
$var wire 1 % n $end
$var wire 1 & b_out $end
$var reg 3 ' alu_fn [2:0] $end
$var reg 16 ( reg1 [15:0] $end
$var reg 16 ) reg2 [15:0] $end
$scope module c_unit $end
$var wire 2 * alu_fn [1:0] $end
$var wire 1 & b_o $end
$var wire 1 ! z $end
$var wire 1 $ v $end
$var wire 1 % n $end
$var reg 1 + result $end
$upscope $end
$scope module cla $end
$var wire 1 , cin $end
$var wire 16 - i_add1 [15:0] $end
$var wire 16 . i_add2 [15:0] $end
$var wire 16 / o_result [15:0] $end
$var wire 16 0 w_SUM [15:0] $end
$var wire 16 1 w_P [15:0] $end
$var wire 16 2 w_G [15:0] $end
$var wire 17 3 w_C [16:0] $end
$var wire 1 # cout $end
$scope begin genblk1[0] $end
$scope module full_adder_inst $end
$var wire 1 4 aftand1 $end
$var wire 1 5 aftand2 $end
$var wire 1 6 bit1 $end
$var wire 1 7 bit1_xor_bit2 $end
$var wire 1 8 bit2 $end
$var wire 1 9 cin $end
$var wire 1 : cout $end
$var wire 1 ; sum $end
$upscope $end
$upscope $end
$scope begin genblk1[1] $end
$scope module full_adder_inst $end
$var wire 1 < aftand1 $end
$var wire 1 = aftand2 $end
$var wire 1 > bit1 $end
$var wire 1 ? bit1_xor_bit2 $end
$var wire 1 @ bit2 $end
$var wire 1 A cin $end
$var wire 1 B cout $end
$var wire 1 C sum $end
$upscope $end
$upscope $end
$scope begin genblk1[2] $end
$scope module full_adder_inst $end
$var wire 1 D aftand1 $end
$var wire 1 E aftand2 $end
$var wire 1 F bit1 $end
$var wire 1 G bit1_xor_bit2 $end
$var wire 1 H bit2 $end
$var wire 1 I cin $end
$var wire 1 J cout $end
$var wire 1 K sum $end
$upscope $end
$upscope $end
$scope begin genblk1[3] $end
$scope module full_adder_inst $end
$var wire 1 L aftand1 $end
$var wire 1 M aftand2 $end
$var wire 1 N bit1 $end
$var wire 1 O bit1_xor_bit2 $end
$var wire 1 P bit2 $end
$var wire 1 Q cin $end
$var wire 1 R cout $end
$var wire 1 S sum $end
$upscope $end
$upscope $end
$scope begin genblk1[4] $end
$scope module full_adder_inst $end
$var wire 1 T aftand1 $end
$var wire 1 U aftand2 $end
$var wire 1 V bit1 $end
$var wire 1 W bit1_xor_bit2 $end
$var wire 1 X bit2 $end
$var wire 1 Y cin $end
$var wire 1 Z cout $end
$var wire 1 [ sum $end
$upscope $end
$upscope $end
$scope begin genblk1[5] $end
$scope module full_adder_inst $end
$var wire 1 \ aftand1 $end
$var wire 1 ] aftand2 $end
$var wire 1 ^ bit1 $end
$var wire 1 _ bit1_xor_bit2 $end
$var wire 1 ` bit2 $end
$var wire 1 a cin $end
$var wire 1 b cout $end
$var wire 1 c sum $end
$upscope $end
$upscope $end
$scope begin genblk1[6] $end
$scope module full_adder_inst $end
$var wire 1 d aftand1 $end
$var wire 1 e aftand2 $end
$var wire 1 f bit1 $end
$var wire 1 g bit1_xor_bit2 $end
$var wire 1 h bit2 $end
$var wire 1 i cin $end
$var wire 1 j cout $end
$var wire 1 k sum $end
$upscope $end
$upscope $end
$scope begin genblk1[7] $end
$scope module full_adder_inst $end
$var wire 1 l aftand1 $end
$var wire 1 m aftand2 $end
$var wire 1 n bit1 $end
$var wire 1 o bit1_xor_bit2 $end
$var wire 1 p bit2 $end
$var wire 1 q cin $end
$var wire 1 r cout $end
$var wire 1 s sum $end
$upscope $end
$upscope $end
$scope begin genblk1[8] $end
$scope module full_adder_inst $end
$var wire 1 t aftand1 $end
$var wire 1 u aftand2 $end
$var wire 1 v bit1 $end
$var wire 1 w bit1_xor_bit2 $end
$var wire 1 x bit2 $end
$var wire 1 y cin $end
$var wire 1 z cout $end
$var wire 1 { sum $end
$upscope $end
$upscope $end
$scope begin genblk1[9] $end
$scope module full_adder_inst $end
$var wire 1 | aftand1 $end
$var wire 1 } aftand2 $end
$var wire 1 ~ bit1 $end
$var wire 1 !" bit1_xor_bit2 $end
$var wire 1 "" bit2 $end
$var wire 1 #" cin $end
$var wire 1 $" cout $end
$var wire 1 %" sum $end
$upscope $end
$upscope $end
$scope begin genblk1[10] $end
$scope module full_adder_inst $end
$var wire 1 &" aftand1 $end
$var wire 1 '" aftand2 $end
$var wire 1 (" bit1 $end
$var wire 1 )" bit1_xor_bit2 $end
$var wire 1 *" bit2 $end
$var wire 1 +" cin $end
$var wire 1 ," cout $end
$var wire 1 -" sum $end
$upscope $end
$upscope $end
$scope begin genblk1[11] $end
$scope module full_adder_inst $end
$var wire 1 ." aftand1 $end
$var wire 1 /" aftand2 $end
$var wire 1 0" bit1 $end
$var wire 1 1" bit1_xor_bit2 $end
$var wire 1 2" bit2 $end
$var wire 1 3" cin $end
$var wire 1 4" cout $end
$var wire 1 5" sum $end
$upscope $end
$upscope $end
$scope begin genblk1[12] $end
$scope module full_adder_inst $end
$var wire 1 6" aftand1 $end
$var wire 1 7" aftand2 $end
$var wire 1 8" bit1 $end
$var wire 1 9" bit1_xor_bit2 $end
$var wire 1 :" bit2 $end
$var wire 1 ;" cin $end
$var wire 1 <" cout $end
$var wire 1 =" sum $end
$upscope $end
$upscope $end
$scope begin genblk1[13] $end
$scope module full_adder_inst $end
$var wire 1 >" aftand1 $end
$var wire 1 ?" aftand2 $end
$var wire 1 @" bit1 $end
$var wire 1 A" bit1_xor_bit2 $end
$var wire 1 B" bit2 $end
$var wire 1 C" cin $end
$var wire 1 D" cout $end
$var wire 1 E" sum $end
$upscope $end
$upscope $end
$scope begin genblk1[14] $end
$scope module full_adder_inst $end
$var wire 1 F" aftand1 $end
$var wire 1 G" aftand2 $end
$var wire 1 H" bit1 $end
$var wire 1 I" bit1_xor_bit2 $end
$var wire 1 J" bit2 $end
$var wire 1 K" cin $end
$var wire 1 L" cout $end
$var wire 1 M" sum $end
$upscope $end
$upscope $end
$scope begin genblk1[15] $end
$scope module full_adder_inst $end
$var wire 1 N" aftand1 $end
$var wire 1 O" aftand2 $end
$var wire 1 P" bit1 $end
$var wire 1 Q" bit1_xor_bit2 $end
$var wire 1 R" bit2 $end
$var wire 1 S" cin $end
$var wire 1 T" cout $end
$var wire 1 U" sum $end
$upscope $end
$upscope $end
$scope begin genblk2[0] $end
$upscope $end
$scope begin genblk2[1] $end
$upscope $end
$scope begin genblk2[2] $end
$upscope $end
$scope begin genblk2[3] $end
$upscope $end
$scope begin genblk2[4] $end
$upscope $end
$scope begin genblk2[5] $end
$upscope $end
$scope begin genblk2[6] $end
$upscope $end
$scope begin genblk2[7] $end
$upscope $end
$scope begin genblk2[8] $end
$upscope $end
$scope begin genblk2[9] $end
$upscope $end
$scope begin genblk2[10] $end
$upscope $end
$scope begin genblk2[11] $end
$upscope $end
$scope begin genblk2[12] $end
$upscope $end
$scope begin genblk2[13] $end
$upscope $end
$scope begin genblk2[14] $end
$upscope $end
$scope begin genblk2[15] $end
$upscope $end
$upscope $end
$scope module zvn_inst $end
$var wire 16 V" a [15:0] $end
$var wire 1 W" alufn_sig $end
$var wire 16 X" b [15:0] $end
$var wire 16 Y" s [15:0] $end
$var wire 1 $ v $end
$var wire 1 Z" xb $end
$var wire 1 ! z $end
$var wire 1 % n $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
1Z"
b11110000 Y"
b10001 X"
1W"
b100000001 V"
0U"
1T"
1S"
1R"
1Q"
0P"
0O"
1N"
0M"
1L"
1K"
1J"
1I"
0H"
0G"
1F"
0E"
1D"
1C"
1B"
1A"
0@"
0?"
1>"
0="
1<"
1;"
1:"
19"
08"
07"
16"
05"
14"
13"
12"
11"
00"
0/"
1."
0-"
1,"
1+"
1*"
1)"
0("
0'"
1&"
0%"
1$"
1#"
1""
1!"
0~
0}
1|
0{
1z
0y
1x
0w
1v
1u
0t
1s
0r
0q
1p
1o
0n
0m
0l
1k
0j
0i
1h
1g
0f
0e
0d
1c
0b
0a
1`
1_
0^
0]
0\
1[
0Z
1Y
0X
0W
0V
0U
0T
0S
1R
1Q
1P
1O
0N
0M
1L
0K
1J
1I
1H
1G
0F
0E
1D
0C
1B
1A
1@
1?
0>
0=
1<
0;
1:
19
08
17
16
05
14
b11111111000011111 3
b100000000 2
b1111111111101111 1
b11110000 0
b11110000 /
b1111111111101110 .
b100000001 -
1,
0+
b10 *
b10001 )
b100000001 (
b101 '
0&
0%
0$
1#
b11110000 "
0!
$end
#10
0#
1&
1+
0C"
0S"
0<"
1="
06"
0+"
03"
0;"
0K"
1a
1d
1l
1t
0$"
0,"
04"
0D"
1i
1q
1y
1#"
1;
04
1%"
0|
0-"
0&"
05"
0."
0E"
0>"
1J
1R
1Z
0L"
1%
0T"
b1111111111 3
0$
07
15
1U
0!"
0)"
01"
0A"
1C
0<
0K
1D
0S
1L
1[
0T
1c
1b
0k
1j
0s
1r
0{
1z
1M"
0F"
b1101001000110011 "
b1101001000110011 /
b1101001000110011 Y"
b1101001000110011 0
1U"
0N"
0Z"
18
0H
0P
1X
0h
0p
0""
0*"
02"
0B"
0J"
0R"
0?
1=
1G
0E
1O
0M
0W
0_
1]
1g
0e
1o
0m
1w
0u
1I"
0G"
1Q"
0O"
b1101000111111111 1
b110011 2
b1000100110011 .
1>
1F
1N
1V
1^
1f
1n
0v
1H"
1P"
b1110111011001100 )
b1110111011001100 X"
b1100000011111111 (
b1100000011111111 -
b1100000011111111 V"
#20
1C"
1<"
0="
16"
1#
0&
0+
1;"
0%
1T"
14"
0U"
1N"
1."
1S"
1#"
13"
1L"
1z
1,"
1F"
1[
0{
1t
1&"
1K"
1Y
1q
1y
1+"
b11111111111111111 3
1K
0D
0-"
05"
1D"
1R
1j
1r
1$"
0G
1E
1}
1)"
11"
1?"
0;
14
1:
0C
1<
1B
0S
1L
0k
1d
0s
1l
1%"
0|
1E"
b10001000110100 "
b10001000110100 /
b10001000110100 Y"
b10001000110100 0
0M"
1H
1P
1h
1p
1""
1*"
12"
1B"
1J"
17
05
1?
0=
1O
1g
1o
0!"
0A"
1I"
b10001000110100 2
b1111111111111111 1
b111111111111111 .
06
0>
0N
0f
0n
1~
1@"
0H"
b1000000000000000 )
b1000000000000000 X"
b1010001000110100 (
b1010001000110100 -
b1010001000110100 V"
#30
1&
1+
0$
1%
1U"
0N"
1:
0Q"
1O"
0;
14
1C
0<
1S
0L
1k
0d
1s
0l
1{
0t
1-"
0&"
15"
0."
1="
06"
b1111111111111110 "
b1111111111111110 /
b1111111111111110 Y"
b1111111111111110 0
1M"
0F"
1Z"
08
1R"
17
05
0?
1=
0O
1M
0g
1e
0o
1m
0w
1u
0)"
1'"
01"
1/"
09"
17"
0I"
1G"
b1111111111111110 2
b1111111111111110 .
16
1>
1N
1f
1n
1v
1("
10"
18"
1H"
b1 )
b1 X"
b1111111111111111 (
b1111111111111111 -
b1111111111111111 V"
#40
0#
0C"
0S"
0+"
03"
0;"
0K"
1&
1+
b1111111111 3
1%
1;
04
0K
1D
1J
0S
1L
1R
0k
1d
1j
0s
1l
1r
1M"
0F"
0L"
1U"
0N"
0T"
07
15
1G
0E
1O
0M
1g
0e
1o
0m
1I"
0G"
1Q"
0O"
b1101000111111111 1
0{
1t
1z
1%"
0|
0$"
0-"
0&"
0,"
05"
0."
04"
1="
06"
0<"
b1101001000110011 "
b1101001000110011 /
b1101001000110011 Y"
b1101001000110011 0
0E"
0>"
0D"
0Z"
18
0H
0P
0h
0p
0""
0*"
02"
0B"
0J"
0R"
1w
0u
0!"
0}
0)"
0'"
01"
0/"
19"
07"
0A"
0?"
b110011 2
b1000100110011 .
0v
0~
0("
00"
08"
0@"
b1110111011001100 )
b1110111011001100 X"
b1100000011111111 (
b1100000011111111 -
b1100000011111111 V"
#100000
